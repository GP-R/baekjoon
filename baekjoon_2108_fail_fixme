#include <iostream>
#include<algorithm>
#include<cmath>
#include<vector>
using namespace std;

int main(void)
{
	int n;
	cin >> n;
	if (n % 2 == 0)
		return 0;
	int* arr = new int[n];
	int sum = 0;
	int max = -4000;
	int min = 4000;
	for (int i = 0; i < n; i++)
	{
		cin >> arr[i];
		sum += arr[i];
		if (max < arr[i])
			max = arr[i];
		if (min > arr[i])
			min = arr[i];
	}
	sort(arr, arr + n);
	int count = 0;
	int maxCount = 1;
	int maxDownCount = -4000;
	int result;
	int secondResult;
	vector<int> v;
	for (int i = 0; i < n; i++)
	{
		count = arr[i];
		while (true)
		{
			if (i >= n - 1)
				break;
			i = i + 1;
			if (arr[i] == count)
			{
				maxCount++;
			}
			else
			{
				i = i - 1;
				break;
			}
		}
		if (maxCount > maxDownCount)
		{
			result = count;
			maxDownCount = maxCount;
			//벡터비우기
			if (v.empty() == false)
			{
				for (int j = 0; j < v.size(); j++)
					v.pop_back();
			}
		}
		if (maxCount == maxDownCount)
		{
			v.push_back(count);
		}
		maxCount = 1;
		// -3 -2 -2 -1 -1 0 0
	}

	//산술평균
	if (round(double(sum) / n) == -0)
		cout << 0 << endl;
	else
		cout << round(double(sum) / n) << endl;
	//중앙값
	cout << arr[n / 2] << endl;
	//최빈값
	if (v.size() == 1)
		cout << result << endl;
	else if (v.size() == 2)
	{
		if (v[0] < 0 && v[1] >= 0)
			cout << v[0] << endl;
		if(v[0] < 0 && v[1] < 0)
			cout << v[1] << endl;
		if (v[0] >= 0)
			cout << v[0] << endl;
	}
	else
		cout << v[1] << endl;
	int minCount = v[0];
	for (int i = 0; i < v.size(); i++)
	{
		if (minCount < v[i])
			minCount = v[i];
	}
	//-3 -3 -2 -2 -1 -1 
	// 1 1 2 3 3
	//-1-1 0 11
	//범위
	if (n == 1)
		cout << 0;
	else
		cout << max - min;
	delete[] arr;
	return 0;
}
